//1) TOKEN SPERATION:

#include <stdio.h>
#include <string.h>

int main(){
    char a[20];
    int i=0,j=0,id1=0,id2=0,id3=0;
    char identifier[10],op[10],constant[10];

    printf("Enter string: ");
    fgets(a,20,stdin);

    for (i=0;i<strlen(a);i++){

        //identifiers
        if(a[i]>='a' && a[i]<='z'){
            identifier[id1]=a[i];
            id1++;
            i++;
            while (a[i]>='a' && a[i]<='z' || a[i]>='0' && a[i]<='9'){
                identifier[id1]=a[i];
                id1++;
                i++;
            }
            identifier[id1]='\0';
            if (strcmp(identifier,"if")==0){
                printf("Keyword: ");
                for (j=0;j<id1;j++){
                    printf("%c",a[i]);
                }
            }
            else {
                printf("Identifier: ");
                for (j=0;j<id1;j++){
                    printf("%c",a[i]);
                }
            }
            printf("/n");
            id1=0;
        }

        // operators
        if (a[i]=='+' || a[i]=='-' || a[i]=='*' || a[i]=='/' || a[i]=='%' || a[i]=='<' || a[i]=='>' || a[i]=='='){
            //op[id2]=a[i];
            //id2++;
            printf("%c", a[i]);
        }

        if (a[i]>='0' && a[i]<='9'){
            constant[id3]=a[i];
            id3++;
            i++;

            while (a[i]>='0' && a[i]<='9')
            {
                constant[id3]=a[i];
                id3++;
                i++;
            }
            printf("Constant: ");
            for (j=0;j<id3;j++){
                printf("%c",a[i]);
            }
            id3=0;
            
        }
    }
}

---------------------------------------------------------------------------

//EX 2: SYMBOL TABLE:

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

struct symobol_Table{
    char v[20], t[10];
    int s;
}st[50];

char *tt[]={"short", "int", "float", "long", "double"};
int size[5]={1,2,4,6,8};
FILE *fp;

int main(){
    char s[100];
    int i=0,sp=0;

    fp=fopen("out.c","r");
    fscanf(fp,"%s",s);

    //print
    //print
    while(!feof(fp)){
        for (i=0;i<5;i++){
            if(strcmp(s,tt[i]==0)){
                fscanf(fp,"%s",s);
                printf(s,tt[i],size[i]);
                strcpy(st[sp].v,s);
                strcpy(st[sp].t,tt[i]);
                st[sp].s=size[i];
                sp++;
            }
        }
        fscanf(fp,"%s",s);
    }

}

---------------------------------------------------------------------------

//EX 3: LEX PROGRAMS:

//ADDITION:
%{ #include<stdio.h> int a,b,c;
%}
%%
"a" printf("enter the value of a:"); scanf("%d",&a); "b" printf("enter the value of b:"); scanf("%d",&b); "c" printf("the addition of %d,%d is %d:",a,b,c=a+b);
%%
int main()
{
yylex();
return 0;
}
int yywrap()
{
return 0;
}

//COUNTING VOWELS:

%{
#include<stdio.h>
int vow=0,num=0,let=0; %}
%%
    
[aeiouAEIOU] vow++;
[0-9] num++;
[A-Za-z] let++;
";" printf("\nVOWELS=%d,LETTERS=%d,DIGITS=%d",vow,let,num); %%
int main() {
yylex(); return 0; }
int yywrap() {
return 0;
}

//COUNTING TOKENS:
%{
#include<stdio.h>
#include<string.h>
char str[20];
int opc=0,dc=0,lc=0,varc=0,idc=0,key=0;
%}
ke (if|else|for|while|break|switch|do|default)
digit [0-9]
op [%|*|+|-|=]
id [_a-zA-Z][_a-zA-Z0-9]*
%%
{digit} dc++;
{op} opc++;
{ke} key++;
{id} idc++;
"\n" printf("digit %d\noperator%d,\nidentifier%d,keyword=%d",dc,opc,idc,key); %%
int main()
{
yylex();
return 0;
}
int yywrap()
{
return 0;
}

---------------------------------------------------------------------------
//EX 4: YACC PROGRAMS:

//VALIDATE ARITH EXPRESSION:
%{
#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>
#include<string.h>
#define YYSTYPE double
%}
%token num
%left '+' '-'
%left '*' '/'
%%
st: st expr '\n' {printf("The given expression is Valid");} |st '\n'
|
|error '\n' {printf("The given expression is Invalid");}
;
  
expr: num |expr '+' expr |expr '/' expr %%
main()
{
printf(" Enter the expression to be validated:"); yyparse();
}
yylex()
{
int ch;
while((ch=getchar())==' '); if(isdigit(ch)|ch=='.')
{
ungetc(ch,stdin);
scanf("%lf",&yylval);
return num;
}
return ch;
}
yyerror(char *s)
{
printf("%S",s);
}
---------------------------------------------------------------------------
//VALIDATE VARIABLE:

%{
#include<stdio.h>
#include<ctype.h>
%}
%token let dig
%%
sad: let recld '\n' {printf("accepted\n"); exit(0);} | let '\n' {printf("accepted\n"); exit(0);}
|
|error {yyerror(" rejected\n");}
;
recld: let recld
| dig recld
| let
| dig
;
%%
yylex(){
  
char ch; while((ch=getchar())==' '); if(isalpha(ch))
return let;
if(isdigit(ch))
return dig;
return ch;
}
yyerror(char *s){ printf("%s",s);
}
main(){
printf("ENTER A variable : "); yyparse();
}
---------------------------------------------------------------------------
//CALCULATOR USING LEX AND YACC
cal.l
%{
#include <stdlib.h>
#include <stdio.h>
#include "y.tab.h"
void yyerror(char*);
extern int yylval;
%}
%%
[ \t]+ ;
[0-9]+ {yylval = atoi(yytext); return INTEGER;}
[-+*/] {return *yytext;}
To write a Program to implement Calculator using LEX and YACC.
  
"(" {return *yytext;}
")" {return *yytext;}
\n {return *yytext;}
. {char msg[25];
sprintf(msg,"%s <%s>","invalid character",yytext); yyerror(msg);
}
cal.y
%{
#include <stdlib.h>
#include <stdio.h>
int yylex(void);
#include "y.tab.h"
%}
%token INTEGER
%%
program:
line program
| line
line:
expr '\n' { printf("%d\n",$1); }
| 'n'
expr:
expr '+' mulex { $$ = $1 + $3; } | expr '-' mulex { $$ = $1 - $3; } | mulex { $$ = $1; }
mulex:
mulex '*' term { $$ = $1 * $3; } | mulex '/' term { $$ = $1 / $3; } | term { $$ = $1; }
term:
'(' expr ')' { $$ = $2; }
| INTEGER { $$ = $1; }
%%
void yyerror(char *s)
{
fprintf(stderr,"%s\n",s);
return;
}
yywrap()
{
return(1);
}
int main(void)
{
yyparse();
return 0;
}
---------------------------------------------------------------------------
//POSTFIX:
LEX.L

%{
#include<stdlib.h>
#include<stdio.h>
#include"y.tab.h"
%}
%%
[0-9]+ {yylval.no=atoi(yytext);return(DIGIT); } [a-z|A-Z][a-z|A-Z|0-9_]* {strcpy(yylval.str,yytext);return (ID);} "+" {return(PLUS);}
"-" {return(MINUS);}
"*" {return(MUL);}
"/" {return(DIV);}
"^" {return(EXPO);}
"(" {return(OPEN);}
To write the C program for implementing postfix notation using lex and yacc
")" {return(CLOSE);} "\n" {return 0;}
[\t] ;
%%

//PROGRAM FOR POSTFIX NOTATION USING YACC TOOL
%{ #include<stdio.h> %}
%union
{
int no;
char str[10]; }
%token<no> DIGIT %token<str> ID %left PLUS MINUS %left MUL DIV %right EXPO
%left OPEN CLOSE
%%
STMT: EXPR{printf("\n");}
EXPR: EXPR PLUS EXPR{printf("+");} | EXPR MINUS EXPR{printf("-");}
| EXPR MUL EXPR{printf("*");} | EXPR DIV EXPR{printf("/");}
| EXPR EXPO EXPR{printf("^");} | OPEN EXPR CLOSE
| DIGIT{printf("%d",yylval.no);} | ID{printf("%s",yylval.str);}

;
%%
int main(void) {
printf("\n"); yyparse(); printf("\n"); return 0;
}
int yywrap() {
return 1; }

---------------------------------------------------------------------------
//EX 5: FIRST AND FOLLOW:


#include<stdio.h>
#include<ctype.h>
#include<string.h>

// Functions to calculate Follow
void followfirst(char, int, int);
void follow(char c);

// Function to calculate First
void findfirst(char, int, int);

int count, n = 0;

// Stores the final result
// of the First Sets
char calc_first[10][100];

// Stores the final result
// of the Follow Sets
char calc_follow[10][100];
int m = 0;

// Stores the production rules
char production[10][10];
char f[10], first[10];
int k;
char ck;
int e;

int main(int argc, char **argv)
{
 int jm = 0;
 int km = 0;
 int i, choice;
 char c, ch;
 count = 8;

 // The Input grammar
 strcpy(production[0], "E=TR");
 strcpy(production[1], "R=+TR");
 strcpy(production[2], "R=#");
 strcpy(production[3], "T=FY");
 strcpy(production[4], "Y=*FY");
 strcpy(production[5], "Y=#");
 strcpy(production[6], "F=(E)");
 strcpy(production[7], "F=i");

 int kay;
 char done[count];
 int ptr = -1;

 // Initializing the calc_first array
 for(k = 0; k < count; k++) {
 for(kay = 0; kay < 100; kay++) {
 calc_first[k][kay] = '!';
 }
 }
 int point1 = 0, point2, xxx;

 for(k = 0; k < count; k++)
 {
 c = production[k][0];
 point2 = 0;
 xxx = 0;

 // Checking if First of c has
 // already been calculated
 for(kay = 0; kay <= ptr; kay++)
 if(c == done[kay])
 xxx = 1;

 if (xxx == 1)
 continue;

 // Function call
 findfirst(c, 0, 0);
 ptr += 1;

 // Adding c to the calculated list
 done[ptr] = c;
 printf("\n First(%c) = { ", c);
 calc_first[point1][point2++] = c;

 // Printing the First Sets of the grammar
 for(i = 0 + jm; i < n; i++) {
 int lark = 0, chk = 0;

 for(lark = 0; lark < point2; lark++) {

 if (first[i] == calc_first[point1][lark])
 {
 chk = 1;
 break;
 }
 }
 if(chk == 0)
 {
 printf("%c, ", first[i]);
 calc_first[point1][point2++] = first[i];
 }
 }
 printf("}\n");
 jm = n;
 point1++;
 }
 printf("\n");
 printf("-----------------------------------------------\n\n");
 char donee[count];
 ptr = -1;

 // Initializing the calc_follow array
 for(k = 0; k < count; k++) {
 for(kay = 0; kay < 100; kay++) {
 calc_follow[k][kay] = '!';
 }
 }
 point1 = 0;
 int land = 0;
 for(e = 0; e < count; e++)
 {
 ck = production[e][0];
 point2 = 0;
 xxx = 0;

 // Checking if Follow of ck
 // has already been calculated
 for(kay = 0; kay <= ptr; kay++)
 if(ck == donee[kay])
 xxx = 1;

 if (xxx == 1)
 continue;
 land += 1;

 // Function call
 follow(ck);
 ptr += 1;

 // Adding ck to the calculated list
 donee[ptr] = ck;
 printf(" Follow(%c) = { ", ck);
 calc_follow[point1][point2++] = ck;

 // Printing the Follow Sets of the grammar
 for(i = 0 + km; i < m; i++) {
 int lark = 0, chk = 0;
 for(lark = 0; lark < point2; lark++)
 {
 if (f[i] == calc_follow[point1][lark])
 {
 chk = 1;
 break;
 }
 }
 if(chk == 0)
 {
 printf("%c, ", f[i]);
 calc_follow[point1][point2++] = f[i];
 }
 }
 printf(" }\n\n");
 km = m;
 point1++;
 }
}

void follow(char c)
{
 int i, j;

 // Adding "$" to the follow
 // set of the start symbol
 if(production[0][0] == c) {
 f[m++] = '$';
 }
 for(i = 0; i < 10; i++)
 {
 for(j = 2;j < 10; j++)
 {
 if(production[i][j] == c)
 {
 if(production[i][j+1] != '\0')
 {
 // Calculate the first of the next
 // Non-Terminal in the production
 followfirst(production[i][j+1], i, (j+2));
 }

 if(production[i][j+1]=='\0' && c!=production[i][0])
 {
 // Calculate the follow of the Non-Terminal
 // in the L.H.S. of the production
 follow(production[i][0]);
 }
 }
 }
 }
}

void findfirst(char c, int q1, int q2)
{
 int j;

 // The case where we
 // encounter a Terminal
 if(!(isupper(c))) {
 first[n++] = c;
 }
 for(j = 0; j < count; j++)
 {
 if(production[j][0] == c)
 {
 if(production[j][2] == '#')
 {
 if(production[q1][q2] == '\0')
 first[n++] = '#';
 else if(production[q1][q2] != '\0'
 && (q1 != 0 || q2 != 0))
 {
 // Recursion to calculate First of New
 // Non-Terminal we encounter after epsilon
 findfirst(production[q1][q2], q1, (q2+1));
 }
 else
 first[n++] = '#';
 }
 else if(!isupper(production[j][2]))
 {
 first[n++] = production[j][2];
 }
 else
 {
 // Recursion to calculate First of
 // New Non-Terminal we encounter
 // at the beginning
 findfirst(production[j][2], j, 3);
 }
 }
 }
}

void followfirst(char c, int c1, int c2)
{
 int k;

 // The case where we encounter
 // a Terminal
 if(!(isupper(c)))
 f[m++] = c;
 else
 {
 int i = 0, j = 1;
 for(i = 0; i < count; i++)
 {
 if(calc_first[i][0] == c)
 break;
 }

 //Including the First set of the
 // Non-Terminal in the Follow of
 // the original query
 while(calc_first[i][j] != '!')
 {
 if(calc_first[i][j] != '#')
 {
 f[m++] = calc_first[i][j];
 }
 else
 {
 if(production[c1][c2] == '\0')
 {
 // Case where we reach the
 // end of a production
 follow(production[c1][0]);
 }
 else
 {
 // Recursion to the next symbol
 // in case we encounter a "#"
 followfirst(production[c1][c2], c1, c2+1);
 }
 }
 j++;
 }
 }
}





