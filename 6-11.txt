//6) TYPE CHECKING:

LEX:

%{ 
#include<stdio.h> 
#include"y.tab.h" 
void yyerror(char *); 
int yylval; 
int yylineno; 
%} 
num [0-9] 
intg {num}{num}* 
floa {num}{num}*.({num}{1,2}) 
doub {num}{num}*.({num}{3,8}) 
%% 
{intg} { return INTEGER; } 
{floa} { return FLOAT; } 
{doub} { return DOUBLE; } 
[+=\n] return *yytext; 
[)( \t] {;} 
%% 
 int yywrap() 
{ 
return 1; 
} 

YACC:

%{#include<stdlib.h> 
#include<stdio.h> 
#include<math.h> 
int yylex(void); 
void yyerror(char *); 
int flag=0; 
%} 
%left '=' 
%left '+' 
%left '(' 
%token INTEGER 
%token FLOAT 
%token DOUBLE 
%% 
program: 
program E '\n' { 
if(flag==0) 
 { 
switch($2) 
{ 
case 1: printf("Integer\n"); break; 
case 2: printf("Float\n"); break; 
case 3: printf("Double\n"); break; 
case 4: printf("Boolean\n"); break; 
} 
 } 
} 
| 
; 
E: 
INTEGER { $$=1; } 
| 
FLOAT { $$=2; } 
| 
DOUBLE { $$=3; } 
| 
E '+' E { 
if($1==$3) 
 $$=$1; 
else 
 { 
if(($1==1 && $3==2) || ($1==2 && $3==1)) 
 $$=2; 
else if(($1==3 && $3==2) || ($1==2 && $3==3)) 
 $$=3; 
else 
{ 
printf("ERROR: Type mismatch\n"); 
flag=1; 
} 
 } 
} 
| 
E '=' '=' E { if($1==$4) $$=4; 
else 
{ 
printf("ERROR: Type mismatch\n"); 
flag=1; 
 } 
} 
| 
'(' E ')' { $$=$2; } 
| 
; 
%% 
void yyerror(char *s) 
{ 
fprintf(stderr,"%s\n",s); 
} 
int main(void) 
{ 
yyparse(); 
return 0; 
} 

---------------------------------------------------------------------------

//7) CONTROL FLOW

#include<stdio.h>
struct variable
{int count;
int num[5];
char tac[5][5];
int gen[10];
int kill[10];
int in[7];
int out[7];
int prev_out[7];
}var[10];
int main()
{
int n,i,d_no=1,k,j,l,in_no,adj[6][6],a,b,l_no,flag=0,pass=2;
printf("\nEnter the number of blocks:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("\nEnter the number of equations in block %d:",i+1);
scanf("%d",&var[i].count);
for(k=0;k<var[i].count;k++)
{
var[i].num[k]=d_no;
d_no++;
printf("\nEnter the tac sequence %d:",k+1);
scanf("%s",var[i].tac[k]);
}
}
for(i=0;i<n;i++)
{
for(k=0;k<d_no-1;k++)
{
var[i].gen[k]=0;
var[i].in[k]=0;
var[i].out[k]=0;
var[i].prev_out[k]=0;
}
for(k=0;k<var[i].count;k++)
{
var[i].gen[var[i].num[k]-1]=1;
}
}
printf("\nGEN SET");
for(i=0;i<n;i++)
{
printf("\n");
for(k=0;k<d_no-1;k++)
printf("%d",var[i].gen[k]);
}
for(i=0;i<n;i++)
{
for(k=0;k<d_no-1;k++)
var[i].kill[k]=0;
for(k=0;k<var[i].count;k++)
{
for(j=0;j<n;j++)
{
if(j!=i)
{for(l=0;l<var[j].count;l++){
if(var[i].tac[k][0]==var[j].tac[l][0])
{var[i].kill[var[j].num[l]-1]=1;
}}}}}
}
printf("\nKILL SET");
for(i=0;i<n;i++)
{printf("\n");
for(k=0;k<d_no-1;k++)
printf("%d",var[i].kill[k]);}
for(i=0;i<n;i++)
{for(j=0;j<n;j++)
adj[i][j]=0; }
printf("\nEnter the number of links:");
scanf("%d",&l_no);
for(i=0;i<l_no;i++)
{printf("\nEnter the link %d:",i+1);
scanf("%d%d",&a,&b);
adj[a-1][b-1]=1; }
printf("\nAdjacency Matrix");
for(i=0;i<n;i++)
{
printf("\n");
for(j=0;j<n;j++)
printf("%d",adj[i][j]);
}
for(i=0;i<n;i++)
{
if(adj[i][0]==1)
{
for(j=0;j<d_no-1;j++)
var[0].in[j]=var[i].gen[j] | var[0].in[j];
}
}
for(i=0;i<d_no-1;i++)
{
a=var[0].in[i] | var[0].gen[i];
b=var[0].in[i] & var[0].kill[i];
var[0].out[i]=a-b;
}
/*printf("\nIn of first block:");
for(i=0;i<d_no-1;i++)
{
printf("%d",var[0].in[i]);
}
printf("\nOut of first block:");
for(i=0;i<d_no-1;i++)
{
printf("%d",var[0].out[i]);
}*/
for(i=1;i<n;i++)
{
for(k=0;k<n;k++)
{
if(adj[k][i]==1)
{
for(j=0;j<d_no-1;j++)
var[i].in[j]=var[k].out[j] | var[i].in[j];
}
}
for(j=0;j<d_no-1;j++)
{
a=var[i].in[j] | var[i].gen[j];
b=var[i].in[j] & var[i].kill[j];
var[i].out[j]=a-b;
}
}
for(i=0;i<n;i++)
{
printf("\n");
for(j=0;j<d_no-1;j++)
printf("%d",var[i].in[j]);
printf("\t");
for(j=0;j<d_no-1;j++)
printf("%d",var[i].out[j]);
}
for(i=0;i<n;i++)
{
for(j=0;j<d_no-1;j++)
var[i].prev_out[j]=var[i].out[j];
}
while(flag==0)
{
for(i=0;i<n;i++)
{
for(k=0;k<n;k++)
{
if(adj[k][i]==1)
{
for(j=0;j<d_no-1;j++)
var[i].in[j]=var[k].prev_out[j] |
var[i].in[j];
}
}
for(j=0;j<d_no-1;j++)
{
a=var[i].in[j] | var[i].gen[j];
b=var[i].in[j] & var[i].kill[j];
var[i].out[j]=a-b;
}
}
printf("\nPass:%d",pass++);
for(i=0;i<n;i++)
{printf("\n");
for(j=0;j<d_no-1;j++)
printf("%d",var[i].in[j]);
printf("\t");
for(j=0;j<d_no-1;j++)
printf("%d",var[i].out[j]);
}
flag=1;
for(i=0;i<n;i++)
{
for(j=0;j<d_no-1;j++)
{
if(var[i].out[j]!=var[i].prev_out[j])
{
break; }}}
for(i=0;i<n;i++)
{ for(j=0;j<d_no-1;j++)
var[i].prev_out[j]=var[i].out[j]; }
for(i=0;i<n;i++)
{
for(j=0;j<d_no-1;j++)
{
var[i].in[j]=0;
var[i].out[j]=0; }
}}
return 0;
}

------------------------------------------------------------------------

//8) STORAGE ALLOCATION:

#include <malloc.h>
#include <stdio.h>
int top;
struct node
{
    int data;
    struct node *next;
    struct node *prev;
};
int main()
{
    int choice, n;
    char choice2;
    printf("Enter the value");
    scanf("%d", &n);
    struct node *curr;
    struct node *curr2;
    struct node *new;
    struct node *top;
    new = (struct node *)malloc(sizeof(struct node));
    curr = new;
    curr->data = n;
    top = curr;
    curr->prev = NULL;
    do
    {
        printf("Do you want to push or pop(1/2): ?");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter the value: ");
            scanf("%d", &n);
            new = (struct node *)malloc(sizeof(struct node));
            new->data = n;
            new->prev = curr;
            curr = new;
            top = curr;
            printf("The no. pushed inside is %d\n", n);
            break;
        case 2:
            printf("The no. popped out is %d\n", top->data);
            top = top->prev;
            free(curr);
            curr = top;
            break;
        }
        curr2 = top;
        while (curr2 != NULL)
        {
            printf("%d", curr2->data);
            if (curr2->prev != NULL)
            {
                printf("->");
            }
            curr2 = curr2->prev;
        }
        printf("Do you want to continue?(y/n): ");
        scanf("%c%c", &choice2, &choice2);
    } while (choice2 == 'y');
    return 0;
}

------------------------------------------------------------------------------------

9) DAG CONSTRUCTION

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct
{
 char op;
 char lc[5],rc[5];
 char labels[5][5];
 int p1,p2,count;
}node;
int main()
{
 char ar[10][5],str[20];
 int i=-1,j=0,k,l,f1,f2,n;
 FILE *fp;
 fp=fopen("stmt.txt","r");
 node stmt[10];
 while(fgets(str,20,fp)!=NULL)
 {
 i++;
 stmt[i].count=0;
 stmt[i].p1=-1;
 stmt[i].p2=-1;
 stmt[i].op='\0';
 if(strstr(str,"+")) stmt[i].op='+';
 else if(strstr(str,"*")) stmt[i].op='*';
 else if(strstr(str,"-")) stmt[i].op='-';
 else if(strstr(str,"/")) stmt[i].op='/';
 else if(strstr(str,"[")) stmt[i].op='[';
 strcpy(stmt[i].labels[0],strtok(str,"="));
 stmt[i].count++;
 strcpy(stmt[i].lc,strtok(NULL,"+*-/%[ \n\0"));
 if(stmt[i].op!='\0') strcpy(stmt[i].rc,strtok(NULL,"]\n\0"));
 else strcpy(stmt[i].rc,"\0");
 f1=0;
 if(strcmp(stmt[i].rc,"\0")==0)
 {
 for(k=i-1;k>=0;k--)
 {
 for(l=0;l<stmt[k].count;l++)
 {
 if(strcmp(stmt[i].lc,stmt[k].labels[l])==0)
 {
 strcpy(stmt[k].labels[stmt[k].count],stmt[i].labels[0]);
 stmt[k].count++;
 i--;
 f1=1;
 break;
 }
 }
 if(f1==1) break;
 }
 }
 if(f1==1) continue;
 f2=0;
 for(k=i-1;k>=0;k--)
 {
 for(l=0;l<stmt[k].count;l++)
 {
 if(strcmp(stmt[i].lc,stmt[k].labels[l])==0)
 {
 stmt[i].p1=k;
 f2=1;
 break;
 }
 }
 if(f2==0)
 if(strcmp(stmt[i].lc,stmt[k].lc)==0 || strcmp(stmt[i].lc,stmt[k].rc)==0)
 {
 stmt[i].p1=k;
 break;
 }
 }
 f2=0;
 if(strcmp(stmt[i].rc,"\0")!=0)
 for(k=i-1;k>=0;k--)
 {
 for(l=0;l<stmt[k].count;l++)
 {
 if(strcmp(stmt[i].rc,stmt[k].labels[l])==0)
 {
 stmt[i].p2=k;
 f2=1;
 break;
 }
 }
 if(f2==0)
 if(strcmp(stmt[i].rc,stmt[k].lc)==0 || strcmp(stmt[i].rc,stmt[k].rc)==0)
 {
 stmt[i].p2=k;
 break;
 }
 }
 if(stmt[i].p1==stmt[i].p2)
 {
 n=stmt[i].p1;
 if(stmt[i].op==stmt[n].op)
 {
 strcpy(stmt[n].labels[stmt[n].count],stmt[i].labels[0]);
 stmt[n].count++;
 i--;
 }
 }
 }
 for(k=0;k<=i;k++)
 {
 if(stmt[k].op=='[')
 printf("\n\nAddress %d:: Node [] is created with %s",&stmt[k],stmt[k].lc);
 else
printf("\n\nAddress %d:: Node %c is created with %s",&stmt[k],stmt[k].op,stmt[k].lc);
if(stmt[k].p1!=-1)
 printf(" from address %d",&stmt[stmt[k].p1]);
 printf(" as left child and %s",stmt[k].rc);
 if(stmt[k].p2!=-1)
 printf(" from address %d",&stmt[stmt[k].p2]);
 printf(" as right child with labels");
 for(l=0;l<stmt[k].count;l++)
 printf(" %s,",stmt[k].labels[l]);
 }
 printf("\n");
}

------------------------------------------------------------------------------------------------

10) BACKEND OF COMPILER

#include <stdio.h>

int main() {
    char statements[10][10];
    int reg = 0; // Register counter
    printf("Enter the number of statements: ");
    int num_statements;
    scanf("%d", &num_statements);
    printf("Enter the statements:\n");
    for (int i = 0; i < num_statements; i++) {
        scanf("%s", statements[i]);
    }
    printf("\n\tStatements\tTarget code\n");
    for (int i = 0; i < num_statements; i++) {
        char dest_var = statements[i][0];
        char op = statements[i][3];
        char src_var = statements[i][4];
        int reg_no = src_var - '0';
        if (reg_no < 0 || reg_no > 9) { // If src_var is not a number, it must be a variable
            printf("\tmov %c, R%d\n", src_var, ++reg);
            reg_no = reg;
        }
        printf("\t%s R%d, %c\n", op == '=' ? "mov" : op == '+' ? "add" : op == '-' ? "sub" : op == '*' ? "mul" : "div", reg_no, dest_var);
        printf("\t\t\t\t\t\t");
        printf("%s\n", op == '=' ? "" : op == '+' || op == '-' ? "add" : "mul");
    }
    return 0;
}


------------------------------------------------------------------------------------------------

11) CODE OPTIMISATION:

#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
int ptr;
map<string,int> m;
int mapper(string var){
 int val=m[var];
 if(val!=0)
 return val;
 m[var]=++ptr;
 return ptr;
}
//global declarations
const int maxn=1e3;
string ip;
vector<string> lineList;
vector< vector<int>> varList;
set< int > lastsaved[maxn];
int vis[maxn];
vector<int> adjlist[maxn];
//end global declarations
bool read(){
 ip="";
 while(ip.size()==0)
 getline(cin,ip);
 return !(ip=="$");
}
bool nonVar(char c){
 if(c>='0' && c<='9')
 return false;
 if(c=='+' || c=='-' || c=='/' || c=='*' || c=='=')
 return false;
 return true;
}
vector<int> getVariables(string s){
 int lptr=0,rptr=0;
 vector<int> seq;
 while(rptr!=s.size()){
 if(nonVar(s[rptr])){
 rptr++;
 }
 else{
 if(lptr!=rptr){
 string temp=s.substr(lptr,rptr-lptr);
 int id=mapper(temp);
 seq.pb(id);
 }
 rptr++;
 lptr=rptr;
 }
 }
 if(lptr<rptr){
 string temp=s.substr(lptr,rptr-lptr);
 int id=mapper(temp);
 seq.pb(id);
 }
 return seq;
}
void dfs(int cur){
 vis[cur]=1;
 for(int i=1;i<varList[cur].size();i++){
 int var=varList[cur][i];
 set<int>::iterator it=lastsaved[var].lower_bound(cur);
 if(it==lastsaved[var].begin())
 continue;
 it--;
 if(vis[*it]==0){
 vis[*it]=1;
 dfs(*it);
 }
 }
}
int main()
{
 fastread;
 cout<<"DEAD CODE OPTIMISATION"<<endl<<endl;
 while(read()){
 if((ip.find("=")==string::npos) && ip.find("print(")==string::npos)
 continue;
 while(ip.find(" ")!=string::npos)
 ip.erase(std::find(ip.begin(), ip.end(), ' '));
 lineList.pb(ip);
 }
 for(int i=0;i<lineList.size();i++){
 string u=lineList[i];
 if(u.find("print(")!=string::npos){
 int en=6,st=6;
 while(u[en]!=')')
 en++;
 int prevptr=ptr;
 int id=mapper(u.substr(st,en-st));
 int curptr=ptr;
 if(prevptr!=curptr){
 cout<<u.substr(st,en-st)<<" not used"<<endl;
 return 0;
 }
 set<int>::iterator it=lastsaved[id].end();
 if(!lastsaved[id].empty()){
 it--;
 dfs(*it);
 }
 vis[i]=1;
 vector<int> temp;
 varList.pb(temp);
 continue;
 }
 varList.pb(getVariables(u));
 lastsaved[varList.back()[0]].insert(i);
 for(int j=1;j<varList.back().size();j++){
 set<int>::iterator it=lastsaved[varList.back()[j]].end();
 if(!lastsaved[varList.back()[j]].empty()){
 it--;
 adjlist[i].pb(*it);
 }
 }
 }
 cout<<"Optimised Code"<<endl;
 for(int i=0;i<lineList.size();i++){
 if(vis[i])
 cout<<lineList[i]<<'\n';
 }
 return 0;
}



